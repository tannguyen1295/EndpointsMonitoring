import unittest
import datetime
from unittest import mock
from lib.producer import Producer

class TestWebsiteChecker(unittest.TestCase):
    def setUp(self):
        self.configs = {
            "kafka_general": '''{
                "service_uri": "", 
                "ca_path": "", 
                "cert_path": "", 
                "key_path": "", 
                "topic": ""
            }''',
            "kafka_producer": '''{
                "request_timeout": 2
            }'''
        }

        self.mock_logger = mock.Mock()

    def _side_effect_for_send_request(self, website_1_mock_response, website_2_mock_response):
        Producer._send_request = mock.Mock()
        Producer._send_request.side_effect = [website_1_mock_response, website_2_mock_response]

    def test_validateWebsites_normalCase_dataShouldBeParsedCorrectly(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = mock.Mock()
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[a-zA-Z0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[a-zA-Z0-9]"
        website_2_topic = "topic_2"
        website_2_mock_response.status_code = 200
        website_2_mock_response.text = "Website 2 value"
        website_2_mock_response.elapsed = datetime.timedelta(microseconds=20000)
        website_2_mock_response.headers = {"Date": "Sun, 06 Feb 2022 20:15:52 GMT"}

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "timestamp": "06-02-2022T18:15:52Z",
                        "response_time_in_millisecond": 20,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_validateWebsites_web2CannotBeReached_web2ResultShouldBeNone(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = None
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[a-zA-Z0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[a-zA-Z0-9]"
        website_2_topic = "topic_2"
        website_2_mock_response = None

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        #timestamp will be autogenerated using datetime.now() if the response is None
        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        del result[1]["status"]["timestamp"]

        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "response_time_in_millisecond": None,
                        "status_code": None,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": None
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_validateWebsite_web1RegexOnlyNumbers_web1ShouldNotMatch(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = mock.Mock()
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[a-zA-Z0-9]"
        website_2_topic = "topic_2"
        website_2_mock_response.status_code = 200
        website_2_mock_response.text = "Website 2 value"
        website_2_mock_response.elapsed = datetime.timedelta(microseconds=20000)
        website_2_mock_response.headers = {"Date": "Sun, 06 Feb 2022 20:15:52 GMT"}

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[0-9]",
                            "content_matched": False
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "timestamp": "06-02-2022T18:15:52Z",
                        "response_time_in_millisecond": 20,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_validateWebsite_web2RegexOnlyAlphabet_web2ShouldNotMatch(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = mock.Mock()
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[a-zA-Z0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[a-zA-Z]"
        website_2_topic = "topic_2"
        website_2_mock_response.status_code = 200
        website_2_mock_response.text = "123"
        website_2_mock_response.elapsed = datetime.timedelta(microseconds=20000)
        website_2_mock_response.headers = {"Date": "Sun, 06 Feb 2022 20:15:52 GMT"}

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "timestamp": "06-02-2022T18:15:52Z",
                        "response_time_in_millisecond": 20,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z]",
                            "content_matched": False
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_validateWebsite_web2PageNotFound_web2ShouldReturn404(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = mock.Mock()
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[a-zA-Z0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[a-zA-Z0-9]"
        website_2_topic = "topic_2"
        website_2_mock_response.status_code = 404
        website_2_mock_response.text = "Page Not Found"
        website_2_mock_response.elapsed = datetime.timedelta(microseconds=20000)
        website_2_mock_response.headers = {"Date": "Sun, 06 Feb 2022 20:15:52 GMT"}

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "timestamp": "06-02-2022T18:15:52Z",
                        "response_time_in_millisecond": 20,
                        "status_code": 404,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_validateWebsite_web2PageNotFound_web2ShouldReturn404(self):
        website_1_mock_response = mock.Mock()
        website_2_mock_response = mock.Mock()
        self._side_effect_for_send_request(website_1_mock_response, website_2_mock_response)

        website_1_url = "https://www.test1.com"
        website_1_regex = "[a-zA-Z0-9]"
        website_1_topic = "topic_1"
        website_1_mock_response.status_code = 200
        website_1_mock_response.text = "Website 1 value"
        website_1_mock_response.elapsed = datetime.timedelta(microseconds=50000)
        website_1_mock_response.headers = {"Date": "Sun, 06 Feb 2022 19:15:52 GMT"}

        website_2_url = "https://www.test2.com"
        website_2_regex = "[0-9]"
        website_2_topic = "topic_2"
        website_2_mock_response.status_code = 404
        website_2_mock_response.text = "Page Not Found"
        website_2_mock_response.elapsed = datetime.timedelta(microseconds=20000)
        website_2_mock_response.headers = {"Date": "Sun, 06 Feb 2022 20:15:52 GMT"}

        websites = [
            {
                "url": website_1_url,
                "regex": website_1_regex,
                "topic": website_1_topic
            },{
                "url": website_2_url,
                "regex": website_2_regex,
                "topic": website_2_topic
            }]

        result = Producer(None, self.configs, self.mock_logger)._validate_websites(websites)
        expected_result = [
            {
                "url": "https://www.test1.com",
                "topic": "topic_1",
                "status": {
                        "timestamp": "06-02-2022T17:15:52Z",
                        "response_time_in_millisecond": 50,
                        "status_code": 200,
                        "content_validation": {
                            "regex": "[a-zA-Z0-9]",
                            "content_matched": True
                    }
                }
            },{

                "url": "https://www.test2.com",
                "topic": "topic_2",
                "status": {
                        "timestamp": "06-02-2022T18:15:52Z",
                        "response_time_in_millisecond": 20,
                        "status_code": 404,
                        "content_validation": {
                            "regex": "[0-9]",
                            "content_matched": False
                    }
                }
            }
        ]

        self.assertEqual(result, expected_result)

    def test_prepareDataForKafka_normalCase_dataShouldContainUrlAndStatusOnly(self):
        website_data = {
            "url": "https://www.test1.com",
            "topic": "topic_1",
            "status": {
                    "timestamp": "06-02-2022T17:15:52Z",
                    "response_time_in_millisecond": 50,
                    "status_code": 200,
                    "content_validation": {
                        "regex": "[a-zA-Z0-9]",
                        "content_matched": True
                }
            }
        }

        result = Producer(None, self.configs, self.mock_logger)._prepare_data_for_kafka(website_data)
        expected_result = {
            "url": "https://www.test1.com",
            "status": {
                    "timestamp": "06-02-2022T17:15:52Z",
                    "response_time_in_millisecond": 50,
                    "status_code": 200,
                    "content_validation": {
                        "regex": "[a-zA-Z0-9]",
                        "content_matched": True
                }
            }
        }

        self.assertEqual(result, expected_result)

if __name__ == '__main__':
    unittest.main()
